{"version":3,"sources":["setTimeFormat.js","App.js","index.jsx"],"names":["setTimeFormat","time","seconds","minutes","Math","floor","hours","hoursFormat","minutesFormat","secondsFormant","App","useState","setTime","timerOn","setTimerOn","useEffect","interval","setInterval","prevTime","clearInterval","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAeeA,G,MAfO,SAACC,GACrB,IAAMC,EAAWD,EAAO,GAClBE,EAAUC,KAAKC,MAAMJ,EAAO,IAC5BK,EAAQF,KAAKC,MAAMJ,EAAO,MAC1BM,EAAeD,EAAQ,GAAKA,EAAQ,GACtC,KACCA,GAAS,GAAKA,GAAS,EAAxB,WAAiCA,GAAjC,UAA8CA,GAC5CE,EAAiBL,EAAU,GACf,IAAZA,EAAiB,KAAlB,WAA6BA,GADZ,UAEfA,GACDM,EAAkBP,EAAU,GAAX,WAAqBA,GAArB,UAAoCA,GAE3D,MAAM,GAAN,OAAUK,EAAV,YAAyBC,EAAzB,YAA0CC,K,OCoB7BC,MA7Bf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAYA,OAXAC,qBAAU,WACR,IAAIC,EAAW,KAQf,OAPIH,EACFG,EAAWC,aAAY,WACrBL,GAAQ,SAACM,GAAD,OAAcA,EAAW,OAChC,KAEHC,cAAcH,GAET,kBAAMG,cAAcH,MAC1B,CAACH,IAEF,sBAAKO,UAAU,iBAAf,UACE,8BACE,sBAAMA,UAAU,aAAhB,SAA8BpB,EAAcC,OAE9C,gCACE,wBAAQoB,QAAS,kBAAMP,GAAW,IAAlC,mBACA,wBAAQO,QAAS,kBAAMT,EAAQ,GAAKE,GAAW,IAA/C,kBACA,wBAAQO,QAAS,kBAAMP,GAAW,IAAlC,oBACA,wBAAQO,QAAS,kBAAMP,GAAW,IAAlC,yBCpBRQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8244507e.chunk.js","sourcesContent":["const setTimeFormat = (time) => {\r\n  const seconds = (time % 60);\r\n  const minutes = Math.floor(time / 60);\r\n  const hours = Math.floor(time / 3600);\r\n  const hoursFormat = (hours < 1 || hours > 23)\r\n    ? '00'\r\n    : (hours >= 1 && hours <= 9) ? `0${hours}` : `${hours}`;\r\n  const minutesFormat = (minutes < 10)\r\n    ? ((minutes === 0) ? '00' : `0${minutes}`)\r\n    : `${minutes}`;\r\n  const secondsFormant = (seconds < 10) ? `0${seconds}` : `${seconds}`;\r\n\r\n  return `${hoursFormat}:${minutesFormat}:${secondsFormant}`;\r\n};\r\n\r\nexport default setTimeFormat;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport setTimeFormat from \"./setTimeFormat\";\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [timerOn]);\n  return (\n    <div className=\"timerContainer\">\n      <div>\n        <span className=\"timeDigits\">{setTimeFormat(time)}</span>\n      </div>\n      <div>\n        <button onClick={() => setTimerOn(true)}>Start</button>\n        <button onClick={() => setTime(0) & setTimerOn(false)}>Stop</button>\n        <button onClick={() => setTimerOn(true)}>Resume</button>\n        <button onClick={() => setTimerOn(false)}>Wait</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}